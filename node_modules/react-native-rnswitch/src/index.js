import React, { Component } from 'react';
import { View, Text, TouchableOpacity, Animated, Easing } from 'react-native';
import Styles from './style';

export default class Switch extends Component{
    constructor(props){
        super(props);
        this.state = {
            value: this.props.value || false,
            text: this.props.text || false,
            duration: this.props.duration || 500,
            activeOpacity: this.props.activeOpacity || 0.8,
            left: new Animated.Value(-34),
            color: new Animated.Value(0)
        };

        this._createAnimation = this._createAnimation.bind(this);
    };

    UNSAFE_componentWillReceiveProps = props => {
        this.setState({
            value: props.value || false
        });
    };

    _createAnimation = () => {
        let { value } = this.state;
        let { onValueChange } = this.props;

        if(value){
            this._switchOff();
        }else {
            this._switchOn();
        }

        onValueChange(!value);
    };

    _switchOn = () => {
        let { left, duration, color } = this.state;

        Animated.parallel([
            Animated.timing(
                left,
                {
                    toValue: 0,
                    duration: duration,
                    easing: Easing.linear
                }
            ),
            Animated.timing(
                color,
                {
                    toValue: 1,
                    duration: duration,
                    easing: Easing.linear
                }
            )
        ]).start();
    };

    _switchOff = () => {
        let { left, duration, color } = this.state;

        Animated.parallel([
            Animated.timing(
                left,
                {
                    toValue: -34,
                    duration: duration,
                    easing: Easing.linear
                }
            ),
            Animated.timing(
                color,
                {
                    toValue: 0,
                    duration: duration,
                    easing: Easing.linear
                }
            )
        ]).start();
    };

    render(){
        let { left, text, color, activeOpacity } = this.state;

        let bColor = color.interpolate({
            inputRange: [0, 1],
            outputRange: ['#CCCCCC', '#0F3311']
        });

        return(
            <TouchableOpacity
                activeOpacity={activeOpacity}
                style={[Styles.switchParent, Styles.pRelative]}
                onPress={this._createAnimation}
            >
                <Animated.View style={[
                    Styles.switchDialog,
                    Styles.h100,
                    Styles.pAbsolute,
                    {
                        left,
                        backgroundColor: bColor
                    }
                ]}>
                    <View style={[
                        Styles.w100,
                        Styles.h100,
                        Styles.pRelative
                    ]}>
                        {
                            (text)?(<Text style={[Styles.pAbsolute, Styles.textLeft]}>On</Text>):(null)
                        }
                        <View style={[Styles.switchCircle]}></View>
                        {
                            (text)?(<Text style={[Styles.pAbsolute, Styles.textRight]}>Off</Text>):(null)
                        }
                    </View>
                </Animated.View>
            </TouchableOpacity>
        )
    }
};
